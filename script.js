let currentScore = 0;
let currentQuestionIndex = 0;

const questions = [
  {
    puzzle: "üìçüîë",
    options: ["‡§ò‡§∞", "‡§¶‡§∞‡§µ‡§æ‡§ú‡§æ", "‡§ö‡§æ‡§¨‡•Ä", "‡§§‡§æ‡§≤‡§æ"],
    correct: 2,
    hint: "‡§á‡§∏ emoji combination ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?"
  },
  {
    puzzle: "üèÉ‚Äç‚ôÇÔ∏èüí®",
    options: ["‡§§‡•á‡§ú ‡§¶‡•å‡§°‡§º‡§®‡§æ", "‡§π‡§µ‡§æ", "‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ", "‡§™‡§∏‡•Ä‡§®‡§æ"],
    correct: 0,
    hint: "‡§Ø‡§π ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à?"
  },
  {
    puzzle: "üåô‚≠ê",
    options: ["‡§¶‡§ø‡§®", "‡§∞‡§æ‡§§", "‡§∏‡•Ç‡§∞‡§ú", "‡§¨‡§æ‡§¶‡§≤"],
    correct: 1,
    hint: "‡§Ø‡§π ‡§ï‡•å‡§® ‡§∏‡§æ ‡§∏‡§Æ‡§Ø ‡§¶‡§ø‡§ñ‡§æ ‡§∞‡§π‡§æ ‡§π‡•à?"
  },
  {
    puzzle: "üî•üíß",
    options: ["‡§ó‡§∞‡•ç‡§Æ ‡§™‡§æ‡§®‡•Ä", "‡§†‡§Ç‡§°‡§æ ‡§™‡§æ‡§®‡•Ä", "‡§¨‡§∞‡•ç‡§´", "‡§≠‡§æ‡§™"],
    correct: 0,
    hint: "‡§Ü‡§ó ‡§î‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§¨‡§®‡§§‡§æ ‡§π‡•à?"
  },
  {
    puzzle: "üìöü§ì",
    options: ["‡§™‡§¢‡§º‡§æ‡§à", "‡§ñ‡•á‡§≤", "‡§´‡§ø‡§≤‡•ç‡§Æ", "‡§ñ‡§æ‡§®‡§æ"],
    correct: 0,
    hint: "‡§Ø‡§π ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à?"
  },
  {
    puzzle: "üåßÔ∏è‚òî",
    options: ["‡§ß‡•Ç‡§™", "‡§¨‡§æ‡§∞‡§ø‡§∂", "‡§¨‡§∞‡•ç‡§´", "‡§π‡§µ‡§æ"],
    correct: 1,
    hint: "‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•à‡§∏‡§æ ‡§π‡•à?"
  },
  {
    puzzle: "üçéüè•",
    options: ["‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡§®‡§æ", "‡§∏‡•á‡§¨ ‡§ñ‡§æ‡§®‡§æ", "‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤", "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø"],
    correct: 3,
    hint: "‡§ï‡§π‡§æ‡§µ‡§§: An apple a day keeps the doctor away"
  },
  {
    puzzle: "üíîüò¢",
    options: ["‡§ñ‡•Å‡§∂‡•Ä", "‡§¶‡•Å‡§ñ", "‡§ó‡•Å‡§∏‡•ç‡§∏‡§æ", "‡§™‡•ç‡§Ø‡§æ‡§∞"],
    correct: 1,
    hint: "‡§Ø‡§π ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ ‡§π‡•à?"
  },
  {
    puzzle: "üåç‚úàÔ∏è",
    options: ["‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ", "‡§ò‡§∞", "‡§ï‡§æ‡§Æ", "‡§∏‡•ç‡§ï‡•Ç‡§≤"],
    correct: 0,
    hint: "‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§î‡§∞ ‡§π‡§µ‡§æ‡§à ‡§ú‡§π‡§æ‡§ú = ?"
  },
  {
    puzzle: "üéÇüéâ",
    options: ["‡§∂‡§æ‡§¶‡•Ä", "‡§ú‡§®‡•ç‡§Æ‡§¶‡§ø‡§®", "‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞", "‡§™‡§æ‡§∞‡•ç‡§ü‡•Ä"],
    correct: 1,
    hint: "‡§ï‡•á‡§ï ‡§î‡§∞ celebration = ?"
  }
];

function updateProgress() {
  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;
  document.getElementById('progress').style.width = progress + '%';
}

function displayQuestion() {
  const question = questions[currentQuestionIndex];
  document.getElementById('puzzle').textContent = question.puzzle;
  document.getElementById('hint').textContent = question.hint;
  
  const optionButtons = document.querySelectorAll('.option-btn');
  optionButtons.forEach((btn, index) => {
    btn.textContent = question.options[index];
    btn.className = 'option-btn';
    btn.disabled = false;
    btn.onclick = () => checkAnswer(btn, index === question.correct);
  });
  
  document.getElementById('result').textContent = '';
  document.getElementById('result').className = 'result';
  document.getElementById('nextBtn').style.display = 'none';
  
  updateProgress();
}

function checkAnswer(button, isCorrect) {
  const resultElement = document.getElementById('result');
  const optionButtons = document.querySelectorAll('.option-btn');
  
  // Disable all buttons
  optionButtons.forEach(btn => btn.disabled = true);
  
  if (isCorrect) {
    button.classList.add('correct');
    resultElement.textContent = 'üéâ ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ ‡§∏‡§π‡•Ä!';
    resultElement.className = 'result correct';
    currentScore += 10;
    document.getElementById('score').textContent = currentScore;
    
    // Vibrate on correct answer (if supported)
    if (navigator.vibrate) {
      navigator.vibrate(200);
    }
  } else {
    button.classList.add('wrong');
    // Show correct answer
    const correctIndex = questions[currentQuestionIndex].correct;
    optionButtons[correctIndex].classList.add('correct');
    resultElement.textContent = '‚ùå ‡§ó‡§≤‡§§! ‡§∏‡§π‡•Ä ‡§ú‡§µ‡§æ‡§¨: ' + questions[currentQuestionIndex].options[correctIndex];
    resultElement.className = 'result wrong';
    
    // Vibrate on wrong answer (if supported)
    if (navigator.vibrate) {
      navigator.vibrate([100, 50, 100]);
    }
  }
  
  // Show next button if not last question
  if (currentQuestionIndex < questions.length - 1) {
    setTimeout(() => {
      document.getElementById('nextBtn').style.display = 'inline-block';
    }, 1000);
  } else {
    setTimeout(() => {
      showFinalScore();
    }, 1500);
  }
}

function showFinalScore() {
  const percentage = Math.round((currentScore / (questions.length * 10)) * 100);
  let message = `üèÜ ‡§ó‡•á‡§Æ ‡§ñ‡§§‡•ç‡§Æ!\n ‡§∏‡•ç‡§ï‡•ã‡§∞: ${currentScore}/${questions.length * 10} (${percentage}%)\n\n`;
  
  if (percentage >= 90) {
    message += "üåü ‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! ‡§Ü‡§™ emoji master ‡§π‡•à‡§Ç!";
  } else if (percentage >= 70) {
    message += "üëç ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§ñ‡•á‡§≤! ‡§•‡•ã‡§°‡§º‡§æ ‡§î‡§∞ practice ‡§ï‡§∞‡•á‡§Ç‡•§";
  } else if (percentage >= 50) {
    message += "üòä ‡§†‡•Ä‡§ï ‡§π‡•à! ‡§î‡§∞ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡§§‡•á ‡§∞‡§π‡•á‡§Ç‡•§";
  } else {
    message += "üí™ ‡§ï‡•ã‡§à ‡§¨‡§æ‡§§ ‡§®‡§π‡•Ä‡§Ç! practice ‡§ï‡§∞‡§ï‡•á ‡§´‡§ø‡§∞ try ‡§ï‡§∞‡•á‡§Ç‡•§";
  }
  
  document.getElementById('result').textContent = message;
}

function nextQuestion() {
  currentQuestionIndex++;
  if (currentQuestionIndex < questions.length) {
    displayQuestion();
  }
}

function restartGame() {
  currentScore = 0;
  currentQuestionIndex = 0;
  document.getElementById('score').textContent = currentScore;
  displayQuestion();
}

// Prevent zoom on double tap
let lastTouchEnd = 0;
document.addEventListener('touchend', function (event) {
  const now = (new Date()).getTime();
  if (now - lastTouchEnd <= 300) {
    event.preventDefault();
  }
  lastTouchEnd = now;
}, false);

// Initialize game
window.onload = function() {
  displayQuestion();
};

// Service worker registration for offline support
if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('sw.js').then(function(registration) {
      console.log('ServiceWorker registration successful');
    }, function(err) {
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}
